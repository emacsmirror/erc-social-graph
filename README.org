#+TITLE: erc-social-graph
#+STARTUP: inlineimages
[[https://travis-ci.org/vibhavp/erc-social-graph][https://travis-ci.org/vibhavp/erc-social-graph.svg?branch=master]]

A [[http://www.jibble.org/piespy/][PieSpy]]-esque social network graph module for ERC.

* Installation:
** Via package.el
   erc-social-graph is available on [[http://melpa.org][MELPA]], just add MELPA to your package
   archives, and install the package with ~M-x package-install erc-social-graph~
** Via el-get
   erc-social-graph can also be installed using [[https://github.com/dimitri/el-get][el-get]]. To do so, run
   ~M-x el-get-install erc-social-graph~
** Via Git:
  Clone this repo to a desired location, a
  add this directory to your load-path, add the module to =erc-modules=:
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "/path/to/erc-social-graph.el"))
  (require 'erc-social-graph)
  (erc-social-graph-enable)
  #+END_SRC
* Usage:
  After enabling the module, ~erc-social-graph~ will starting monitoring
  IRC channels for any text sent by connected users (By hooking the parsing
  function to ~erc-insert-post hook~ and ~erc-send-post-hook~). It checks the
  sent text for any nick highlights, which it then adds to the hash table 
  ~sgraph-table~. This table can be then "drawn" using ~sgaph-draw~, which converts
  the user-selected channel graph to a textual [[http://en.wikipedia.org/wiki/DOT_(graph_description_language)][DOT graph representation]].
  This can be compiled to a graph image using [[http://www.graphviz.org/][Graphviz]], or [[http://www.webgraphviz.com/][several]] [[http://graphviz-dev.appspot.com/][online]] [[http://sandbox.kidstrythisathome.com/erdos/][tools]].
  
** Dynamic Graphs:
   If the option ~erc-social-graph-dynamic-graph~ is enabled 
   (~M-x customize-group erc-social-graph~), ~sgraph-draw~ will preview the graph
   dot's -Tx11 option, which makes use of Xlib canvas.

* Example:
  An example of a dynamic graph.
  [[./example.gif]]
